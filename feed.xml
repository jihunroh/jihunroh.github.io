<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://jihunroh.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jihunroh.github.io/" rel="alternate" type="text/html" /><updated>2024-10-16T06:26:31+09:00</updated><id>https://jihunroh.github.io/feed.xml</id><title type="html">JiHun Roh</title><author><name>노지훈</name></author><entry><title type="html">제주와 휴가, 라이딩</title><link href="https://jihunroh.github.io/2024/10/06/%EC%A0%9C%EC%A3%BC%EC%99%80-%ED%9C%B4%EA%B0%80,-%EB%9D%BC%EC%9D%B4%EB%94%A9/" rel="alternate" type="text/html" title="제주와 휴가, 라이딩" /><published>2024-10-06T00:00:00+09:00</published><updated>2024-10-06T00:00:00+09:00</updated><id>https://jihunroh.github.io/2024/10/06/%EC%A0%9C%EC%A3%BC%EC%99%80%20%ED%9C%B4%EA%B0%80,%20%EB%9D%BC%EC%9D%B4%EB%94%A9</id><content type="html" xml:base="https://jihunroh.github.io/2024/10/06/%EC%A0%9C%EC%A3%BC%EC%99%80-%ED%9C%B4%EA%B0%80,-%EB%9D%BC%EC%9D%B4%EB%94%A9/"><![CDATA[<p>내 지난 회사 생활에서 억울한 부분이 하나 있는데. 제주도 교육원에 한번밖에 못간 것이다.
서너번 갔다온 친구들도 있는데, 난 일 한다고 미루고 미루다가, 작년 여름에 처음으로 가보았다.
와이프와, 강아지들과, 자전거와, 그리고 차와 함께 제주가는 배를 탔다. 목포는 정말 항구였다.</p>

<p>항공편은 어두운 터널을 통과하는 느낌이라면, 배편은 탁 트인 사막을 건너는 느낌이 든다.
쪽빛 남도해상에서, 낙타가 된 듯한 그 느낌이 무척 맘에 들었다.
선상에서부터, 자전거와 함께와서 다행이라 생각했다.
바다와 밭담을 끼고, 습기와 햇볕이 함께하는 라이딩을 하면서, 제주엔 꼭 다시 와야겠다고 다짐했다.</p>

<p>서두가 길었는데, 사실 올해 내 중요한 목표가 제주환상자전거길을 밟는 것이다.
234km 정도 되는 그 거리를 작년에는 150km 지점에서 펑크로 포기했었다.
먼저 한번 다 돌면, 내년엔 이틀에 걸쳐, 그 후엔 삼일에 걸쳐, 일주일에 걸쳐, 돌고 돌고 또 돌고 싶다.</p>

<p>그런데 이놈의 회사는 8.15일 주간의 휴가를 8.5일로 땡겨쓰게 하더니,
어제는 8.5일 휴가를 못쓸 상황이 되었다가, 오늘은 8.5일 휴가가 다시 가능한 상황이 됐다.
와중에 교육원 숙소 예약은 취소해버렸고, 이제는 예약담당자한테 미안하기도 하고 해서 그냥 외부 숙소를 이용하려한다.</p>

<p>날씨가 따라줄까? 그때 돌지 못한 80km는 어떤 모습일까? 떠나보면 알게될꺼야.
8월이고, 10K 러닝은 4분대로, 수영은 중급으로, 자전거는 제주로 나아가고 있다.</p>

<p>국회가 8.12일에서 8.1일로 당겨져 감격에 벅차 오글거리며 쓰는 글</p>]]></content><author><name>노지훈</name></author><category term="운동," /><category term="자전거" /><summary type="html"><![CDATA[내 지난 회사 생활에서 억울한 부분이 하나 있는데. 제주도 교육원에 한번밖에 못간 것이다. 서너번 갔다온 친구들도 있는데, 난 일 한다고 미루고 미루다가, 작년 여름에 처음으로 가보았다. 와이프와, 강아지들과, 자전거와, 그리고 차와 함께 제주가는 배를 탔다. 목포는 정말 항구였다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/covers/20241006.jpg" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/covers/20241006.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">자전거, 돈, 업힐</title><link href="https://jihunroh.github.io/2024/09/12/%EC%9E%90%EC%A0%84%EA%B1%B0,-%EB%8F%88,-%EC%97%85%ED%9E%90/" rel="alternate" type="text/html" title="자전거, 돈, 업힐" /><published>2024-09-12T00:00:00+09:00</published><updated>2024-09-12T00:00:00+09:00</updated><id>https://jihunroh.github.io/2024/09/12/%EC%9E%90%EC%A0%84%EA%B1%B0,%20%EB%8F%88,%20%EC%97%85%ED%9E%90</id><content type="html" xml:base="https://jihunroh.github.io/2024/09/12/%EC%9E%90%EC%A0%84%EA%B1%B0,-%EB%8F%88,-%EC%97%85%ED%9E%90/"><![CDATA[<p>8월에는 나와 자전거, 그리고 돈의 관계를 되짚었다.
허락하는 와이프. 망설이는 나.
새 자전거를 갖고 싶은 충동을 머리로 잘 미뤄왔다.</p>

<p>나도 내가 간만 보는데 그치고, 새 자전거를 사지는 않을 거라 생각했다.
유리지갑에, 간만 보고 사지 않은게 정말 많다.
와이프는 내가 사지 못할 거라 생각하고 허락했다고 한다. 와이프가 아는 난 그런 사람이었다.</p>

<p>어쩌다, 예전같지 않은 배팅으로 갖게 된 자전거.
새 자전거를 갖게 된 후, 값어치만큼 쓰자고 업힐을 계속 올랐다.
업힐 오르는 기분을 많이 좋아해서 그렇다. 딱 하나에만 집중하고 있는 느낌이 편하다.
내 느낌에만 집중할 수 있다. 대체로 힘든 느낌이지만, 내가 힘든 느낌이구나 하고 객관화하면 그럭저럭 견딜만 하다.</p>

<p>그 찰나에 드라마도 쓴다. 멈추지 않으려고 몸부림도 치고, 내가 이 짓을 왜 하나 몸서리도 친다.
남은 기어는 남은 기회다. 새 자전거의 미드컴팩을 쓰면서 마지막 기어비에 외줄타기를 더 많이 하게 됐다.
뒤가 없다는 느낌을 더 많이 받는다. 그래서 새 자전거로는 업힐에서 더 위험한 배팅을 한다.
좋은 결과를 얻기도 하고(이시은, 영준형 보고잇나!?), 망하기도 한다.</p>

<p>되돌아가도 자전거는 살 것 같다. 빨리 식을까봐도 걱정되기도 하는데, 아직은 라이딩 중에 좋은 경치를 마주하면 여전히 눈물이 난다. 감수성 여전히 충만함 ㅇㅇ.
이 느낌을 모르는 사람과 같이 느낄 방법을 찾고 있다. 제보바람.</p>

<p>(러닝도 어려울 정도로 소나기가 내린 구실로 운동안하고 맥주 꿀꺽하며 쓰는 글)</p>]]></content><author><name>노지훈</name></author><category term="운동," /><category term="자전거" /><summary type="html"><![CDATA[8월에는 나와 자전거, 그리고 돈의 관계를 되짚었다. 허락하는 와이프. 망설이는 나. 새 자전거를 갖고 싶은 충동을 머리로 잘 미뤄왔다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/covers/20240912.jpg" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/covers/20240912.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">운동을 사탕같이 녹여먹으려 한다</title><link href="https://jihunroh.github.io/2024/06/26/%EC%9A%B4%EB%8F%99%EC%9D%84-%EC%82%AC%ED%83%95%EA%B0%99%EC%9D%B4-%EB%85%B9%EC%97%AC%EB%A8%B9%EC%9C%BC%EB%A0%A4-%ED%95%9C%EB%8B%A4/" rel="alternate" type="text/html" title="운동을 사탕같이 녹여먹으려 한다" /><published>2024-06-26T00:00:00+09:00</published><updated>2024-06-26T00:00:00+09:00</updated><id>https://jihunroh.github.io/2024/06/26/%EC%9A%B4%EB%8F%99%EC%9D%84%20%EC%82%AC%ED%83%95%EA%B0%99%EC%9D%B4%20%EB%85%B9%EC%97%AC%EB%A8%B9%EC%9C%BC%EB%A0%A4%20%ED%95%9C%EB%8B%A4</id><content type="html" xml:base="https://jihunroh.github.io/2024/06/26/%EC%9A%B4%EB%8F%99%EC%9D%84-%EC%82%AC%ED%83%95%EA%B0%99%EC%9D%B4-%EB%85%B9%EC%97%AC%EB%A8%B9%EC%9C%BC%EB%A0%A4-%ED%95%9C%EB%8B%A4/"><![CDATA[<p>운동은 사탕 같다고 한다.
깨물어먹으면 입 안을 덮어버리는 강한 단맛.
하지만 오래가진 않는다.</p>

<p>그래서 새로 만난 트레이너 선생님은
운동을 (맛있다고 깨물어먹지 말고) 녹여먹듯 해야 한다고 한다.
잔잔한 재미를 느끼면 됐지
운동량을 빨리 늘리지 말라는 뜻이었다.</p>

<p>그래서인지 아주 특별하게도
웨이트 트레이너 선생님에게
쇠질보다 유연성 운동을 더 많이 배우고 있다.
스트레칭을 하며 이건 어떤 근육을 늘리는 동작인지,
내게 왜 필요한지, 강의를 듣는 느낌이다.</p>

<p>선생님과 몇번 운동을 같이 하고선,
특정 운동 하나에만 천착되지 말아야겠다는 결론을 냈다.
천(1000)의 운동은 천(1000)의 매력을 갖고 있다고 하면 될까.
수영, 마라톤, 배드민턴 등 왠만한건 다 하고 있다는
웨이트 선생님(어쩌면 유산소 선생님, 어쩌면 유연성 선생님)과 운동하는 느낌을 나누는게 재밌다.</p>

<p>자전거를 탈 때 마주하는 산과 강의 굽이굽이,
길가를 뛰어다닐 때 들리는 새들의 지저귐,
헤엄칠 때 손바닥에 웅켜잡힐 듯한 물덩어리.
뭐 하나 포기하기 어려운 포인트들이 있다.
난 잘하기보단 다 느껴보고 싶다.</p>

<p>그래서 말인데, 사실 나는 병을 하나 달고 있다.
어느날 한쪽 눈이 침침했는데.
병원을 가보라는 와이프 성화에,
정말로, 그 잔소리를 듣기 싫어서 동네 안과엘 갔었다.</p>

<p>증상은 확인되는데 원인이 안보인다니 큰 병원엘 갔고,
그때까지도 ‘뭐가 나오긴 하겠어?’ 하는 생각으로
실속없이 나갈 진료비를 아까워했다.</p>

<p>대형병원 의사선생님이 나보고 뇌졸중이라 했을 땐,
너무 황당해서 할말이 없었다.
뇌로 올라가는 큰 동맥 1개가 완전히 막혔다는데,
터질지 말지 알수 없으니 해야한다는 작업은 더 황당했다.</p>

<p>허벅지에 구멍을 뚫어 카테터라는 길고 얇은 관을
혈관을 따라 머리부분까지 밀어넣어 혈류를 촬영한다는 것이었다.
들여다보고 문제가 있으면 시술할수도 있다고 한다.
마치 대장내시경 할때 용종을 떼어내듯.</p>

<p>이게 혈관조영술이라 들었다.
안아프다는 후기들을 한참을 찾아보고 확인했지만,
나는 혈관조영술을 받는 그 과정이 너무 힘들었다.
비명을 끊지 않으니
그제서야 마취를 한방, 두방 더 놔주는 의사선생님이 미웠다.
진작에 놔주지.</p>

<p>살려고 운동을 한다는 말이 있다.
건강경고장을 이렇게 쎄게 받고서야,
난 반강제적으로, 어쩌면 생존욕구에 기한 본능으로
운동을 새롭게 이해해야만 했다.
고통과 인내가 아니라, 즐거움과 행복의 과정이라고.
오글거리지만 이건 내가 사랑하는 사람들과 오래 살기 위해
진지하게 생각한 생존전략이다.</p>

<p>이번 5월은 여러 운동을 많은 사람들과 할수 있어 너무 행복하다.
동료들과 서울에서 따릉이를 타고 다닐 수 있어 좋고,
등산가자는 지인들이 반갑고, 새롭게 만난 동호회 사람들도 좋다.
이제는 와이프가 좋아하는 요가도.. 같이 할 마음의 준비가 됐다.</p>

<p>운동을 사탕같이 녹여먹으려 한다.</p>

<p>오늘, 바쁜 와중에도 여러 틈새운동을 할 수 있었던 점에 가슴이 벅차올라 쓰는 글</p>]]></content><author><name>노지훈</name></author><category term="운동" /><summary type="html"><![CDATA[운동은 사탕 같다고 한다. 깨물어먹으면 입 안을 덮어버리는 강한 단맛. 하지만 오래가진 않는다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/covers/20240626.jpg" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/covers/20240626.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">댕댕이 위치나 재실 여부 추적하기</title><link href="https://jihunroh.github.io/2022/10/16/%EA%B0%95%EC%95%84%EC%A7%80-%EC%9C%84%EC%B9%98%EB%82%98-%EC%9E%AC%EC%8B%A4%EC%97%AC%EB%B6%80-%EC%B6%94%EC%A0%81%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="댕댕이 위치나 재실 여부 추적하기" /><published>2022-10-16T00:00:00+09:00</published><updated>2022-10-16T00:00:00+09:00</updated><id>https://jihunroh.github.io/2022/10/16/%EA%B0%95%EC%95%84%EC%A7%80%20%EC%9C%84%EC%B9%98%EB%82%98%20%EC%9E%AC%EC%8B%A4%EC%97%AC%EB%B6%80%20%EC%B6%94%EC%A0%81%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://jihunroh.github.io/2022/10/16/%EA%B0%95%EC%95%84%EC%A7%80-%EC%9C%84%EC%B9%98%EB%82%98-%EC%9E%AC%EC%8B%A4%EC%97%AC%EB%B6%80-%EC%B6%94%EC%A0%81%ED%95%98%EA%B8%B0/"><![CDATA[<p>사람이 집을 들락날락 하는 건 센싱할 방법이 많다. 사람 몸에 사실상 붙어있는 스마트폰 덕분이다.
스마트폰이 실내 Wi-Fi 라우터에 연결되었는지, 블루투스 어댑터에서 스캔이 되는지, GPS 위치는 어떻게 찍히는지는 직관적으로 알 수 있다.
물론 스마트폰에 의존하지 않는 현관문 개폐 센서, 레이저 센서도 출시되어 있다.</p>

<p><strong>반려동물은 다르다.</strong> 댕댕이를 잃어버렸을 때, 댕댕이가 어디 있는지를 알고 싶을 것이다.
댕댕이 몸에 시술해도 무해하고 체온을 전력원으로 삼는 GPS나 블루투스 칩이 있다면 좋겠지만, 댕댕이에게 뭘 붙이는거라곤 현재로서는 목걸이 밖에 없는 것 같다.
<strong>지금으로서는 목걸이에 트래킹 장치를 다는 수밖에 없다.</strong></p>

<h3 id="어떤-장치를-달까">어떤 장치를 달까?</h3>

<p><img src="/assets/images/2022/airtag_smarttag.webp" alt="Apple AirTag &amp; Samsung Galaxy Smart Tag" /></p>

<p>Apple의 AirTag, 삼성의 Galaxy Smart Tag는 선택지에서 바로 제외했다.
스마트폰을 BLE Observer로 삼기 때문에, 와이프와 내가 출근한 시간(=집에 스마트폰이 없는 시간)에 댕댕이들의 재실 여부를 확인할 수 없다.
그리고 센싱 데이터가 활짝 개방되어있지 않아 Home Assistant 같은 환경에서는 자동화를 만들기 곤란하다.
여러 평들을 보면 잘 작동하는 환경도 기대보다 제한적인 것 같다.</p>

<p>반면, 댕댕이에 쓸 수 있는 GPS Tracker는 선택지가 많지 않고, 배터리 소모가 커 손이 많이 간다.
시중의 GPS Tracker는 월 이용요금을 받기도 했다. <strong>GPS Tracker도 포기했다. 내 질문을 <code class="language-plaintext highlighter-rouge">우리 댕댕이 달자는 지금 어디있을까</code>가 아니라 <code class="language-plaintext highlighter-rouge">우리 댕댕이 달자는 지금 집에 있을까</code>로 단순화할 수 밖에 없었다.</strong></p>

<p>결국, 자주가는 IoT 커뮤니티에서 <strong>BLE Beacon을 쓰는 것이 좋겠다는 의견을 들었다.</strong></p>

<h3 id="준비물-1-ble-beacon">준비물 1: BLE Beacon</h3>

<p>댕댕이가 불편없이 메고 다닐 수 있게 가능한 가볍고 작은 것으로 선택했다.
개당 19달러 정도에 폭 3.5x3.5cm, 무게 10g 정도 하는 <a href="https://www.amazon.com/dp/B085XN9B7N?psc=1&amp;ref=ppx_yo2ov_dt_b_product_details">Blue Charm Beacon</a>이 괜찮아보여 2개 구매했다. 다른 유사제품도 많다.</p>

<p><img src="/assets/images/2022/ble_beacon.jpg" alt="BLE Beacon" /></p>

<p>우리 댕댕이 목걸이에 달아놓았다.</p>

<p><img src="/assets/images/2022/bluecharm_on_collar.jpg" alt="목줄에 멘 BLE Beacon" /></p>

<p>BLE Beacon 사용설명서는 Beacon 설정을 가급적 수정하지 말라고 하는데, 블루투스 어댑터에서 자주 이탈하는 현상이 있어 <a href="https://play.google.com/store/apps/details?id=com.beacon.kbeaconset&amp;hl=en&amp;gl=US">KBeacon이라는 앱</a>으로 신호 송출주기를 1000ms로 수정했다.
배터리를 조금이라도 아낄까 싶어 iBeacon은 끄고 EddyStone(TLM)만 송신하도록 설정했다.</p>

<p><img src="/assets/images/2022/kbeacon.webp" alt="BLE Beacon" /></p>

<p>구매하고 사용한지 한달이 되어가는 지금, AirTag만큼 영롱하지 못한 점은 아쉽지만 무게나 크기 때문에 불편한 점은 없다.</p>

<h3 id="준비물-2-ble-beacon-tracker">준비물 2: BLE Beacon Tracker</h3>

<p>BLE Tracker는 BLE Beacon이 송출하는 신호의 세기를 통해 재실 여부를 판단하고, MQTT Broker를 통해 Home Assistant에도 데이터를 보내준다.
<a href="https://www.home-assistant.io/integrations/bluetooth_le_tracker/">Home Assistant의 자체 BLE Tracker가 있지만</a> 만듦새가 좋지 않다는 평이 좀 있었다.
대안으로 <a href="https://www.room-assistant.io">room-assistant</a>를 설치했다.</p>

<p>room-assistant 설정에서는 <code class="language-plaintext highlighter-rouge">homeAssistant</code>, <code class="language-plaintext highlighter-rouge">bluetoothLowEnergy</code> 확장을 켜고,
MQTT Broker와 각 Beacon을 트래킹하도록 설정하였다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">global</span><span class="pi">:</span>
  <span class="na">instanceName</span><span class="pi">:</span> <span class="s">home</span>
  <span class="na">integrations</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">homeAssistant</span>
    <span class="pi">-</span> <span class="s">bluetoothLowEnergy</span>
<span class="na">homeAssistant</span><span class="pi">:</span>
  <span class="na">mqttUrl</span><span class="pi">:</span> <span class="s1">'</span><span class="s">mqtt://MQTT</span><span class="nv"> </span><span class="s">브로커</span><span class="nv"> </span><span class="s">주소'</span>
  <span class="na">mqttOptions</span><span class="pi">:</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">&lt;MQTT 브로커 username &gt;</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">&lt;MQTT 브로커 password &gt;</span>
<span class="na">bluetoothLowEnergy</span><span class="pi">:</span>
  <span class="na">hciDeviceId</span><span class="pi">:</span> <span class="m">0</span>
  <span class="na">timeout</span><span class="pi">:</span> <span class="m">60</span>
  <span class="na">allowlist</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">dd340206****</span>
    <span class="pi">-</span> <span class="s">dd340206****</span>
  <span class="na">tagOverrides</span><span class="pi">:</span>
    <span class="na">dd340206****</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">Dalja BLE Tag</span>
    <span class="na">dd340206****</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">SSamjang BLE Tag</span>
</code></pre></div></div>

<p>MQTT Broker를 통해 Home Assistant에도 Beacon 트래킹 결과가 entity로 잘 떴다.
언제 댕댕이가 문 밖으로 나갔는지를 알 수 있다.</p>

<p><img src="/assets/images/2022/homeassistant_entities.jpg" alt="BLE Beacon" /></p>

<p><img src="/assets/images/2022/ble_tracker_history.webp" alt="BLE Beacon" /></p>

<h2 id="활용하는-방법">활용하는 방법</h2>

<p>이제 댕댕이 재실 여부 데이터(정확히는 댕댕이의 목걸이 재실 여부)가 수집되기에 활용방법은 무궁무진하다.
현재 쓰고 있는 자동화는 간단한 것들이다.</p>

<ol>
  <li>
    <p>댕댕이의 외출 여부를 스마트폰 푸시알람으로 받는다. 특히, 댕댕이 유치원에서 직접 집에 들어와 댕댕이 등원을 시켜주는데, 제 시간에 등하원을 했는지 확인이 가능하다.
일주일 간 평균 외출 시간도 관리할 수 있다.
<img src="/assets/images/2022/dalssam_notify.webp" alt="외출 알림" /></p>
  </li>
  <li>
    <p>댕댕이가 없는 동안 집안에서 동작이 감지되면 스마트폰에 경고 알람과 텔레그램 메세지를 보낸다.
댕댕이가 있는 동안 감지되는 (댕댕이의) 동작과는 따로 관리할 수 있어 유용하다.</p>
  </li>
  <li>
    <p>댕댕이가 외출하면 로봇청소기를 돌린다.
로봇청소기가 돌 때 댕댕이들이 흥분하기에 산책나갈 때 로봇청소기를 돌린다.
보통 한바퀴 청소에 30~40분 정도 소요되어 산책하고 돌아오면 청소가 완료되어있다.
산책나갈 때 미리 장난감 정리를 하고 나가게 된다.</p>
  </li>
</ol>]]></content><author><name>노지훈</name></author><category term="IoT" /><category term="Puppy" /><summary type="html"><![CDATA[사람이 집을 들락날락 하는 건 센싱할 방법이 많다. 사람 몸에 사실상 붙어있는 스마트폰 덕분이다. 스마트폰이 실내 Wi-Fi 라우터에 연결되었는지, 블루투스 어댑터에서 스캔이 되는지, GPS 위치는 어떻게 찍히는지는 직관적으로 알 수 있다. 물론 스마트폰에 의존하지 않는 현관문 개폐 센서, 레이저 센서도 출시되어 있다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/2022/dalssam_notify.webp" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/2022/dalssam_notify.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">어항 수온을 집 밖에서도 관리하기</title><link href="https://jihunroh.github.io/2022/09/24/%EC%96%B4%ED%95%AD-%EC%88%98%EC%98%A8%EC%9D%84-%EC%A7%91-%EB%B0%96%EC%97%90%EC%84%9C%EB%8F%84-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="어항 수온을 집 밖에서도 관리하기" /><published>2022-09-24T00:00:00+09:00</published><updated>2022-09-24T00:00:00+09:00</updated><id>https://jihunroh.github.io/2022/09/24/%EC%96%B4%ED%95%AD%20%EC%88%98%EC%98%A8%EC%9D%84%20%EC%A7%91%20%EB%B0%96%EC%97%90%EC%84%9C%EB%8F%84%20%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://jihunroh.github.io/2022/09/24/%EC%96%B4%ED%95%AD-%EC%88%98%EC%98%A8%EC%9D%84-%EC%A7%91-%EB%B0%96%EC%97%90%EC%84%9C%EB%8F%84-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0/"><![CDATA[<p>간만에 여유가 있어, 오래전 홀린듯이 사두었던 <a href="https://store.arduino.cc/products/arduino-uno-wifi-rev2">Arduino Uno WiFi Rev2</a> 보드로 어항 수온 센서를 만들었다. 어항 수온계는 제품이 워낙 많지만, Home Assistant  같은 IoT 플랫폼에서 데이터를 수집할 수 있는 제품은 발견치 못했다. 만들만 하다고 생각했다.</p>

<h2 id="준비물">준비물</h2>

<ul>
  <li><a href="https://store.arduino.cc/products/arduino-uno-wifi-rev2">Arduino Uno WiFi Rev2 보드</a></li>
  <li><a href="https://ko.aliexpress.com/item/4000068914916.html">DS18B20 수온측정 모듈 + 프로브</a></li>
  <li><a href="https://ko.aliexpress.com/item/32896971385.html">SSD1306 OLED 모듈</a></li>
  <li><a href="https://www.arduino.cc/en/software">Arduino IDE</a> 또는 <a href="https://platformio.org/">PlatformIO</a></li>
</ul>

<h2 id="구상">구상</h2>

<ul>
  <li>수온을 프로브로 일정주기(예: 3초)마다 측정한다.</li>
  <li>측정된 수온을 디지털 액정에 보여준다.</li>
  <li>측정된 수온을 MQTT Broker에 전달하여 Home Assistant에 표현한다.</li>
</ul>

<h2 id="수온-측정하기">수온 측정하기</h2>

<p>언제 왜 샀는지도 모르는 <code class="language-plaintext highlighter-rouge">DS18B20 모듈</code>의 제품 설명에서 풀업 저항을 달아서 쓰라 하기에, 다른 사용례를 보고 4.7kΩ의 풀업 저항을 달았다.</p>

<p><img src="/assets/images/2022/DS18B20.png" alt="DS18B20" /></p>

<p>Platform IO에서 <a href="https://www.arduino.cc/reference/en/libraries/onewire/"><code class="language-plaintext highlighter-rouge">OneWire</code></a>, <a href="https://www.arduino.cc/reference/en/libraries/dallastemperature/"><code class="language-plaintext highlighter-rouge">DallasTemperature</code></a> 라이브러리를 설치했다.
사실 알리익스프레스에서 구한 중국산이다 보니 라이브러리가 있을까 걱정했는데,
동일한 제품들의 모조품이라 그런지 라이브러리도 그대로 작동!</p>

<p>간단한 소스를 만들어 바로 물에 담가 테스트 시작.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;OneWire.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;DallasTemperature.h&gt;</span><span class="cp">
</span>
<span class="cp">#define ONE_WIRE_BUS 2
</span>
<span class="n">OneWire</span> <span class="nf">oneWire</span><span class="p">(</span><span class="n">ONE_WIRE_BUS</span><span class="p">);</span>
<span class="n">DallasTemperature</span> <span class="nf">sensors</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oneWire</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="n">sensors</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">sensors</span><span class="p">.</span><span class="n">requestTemperatures</span><span class="p">();</span>
  <span class="kt">float</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">round</span><span class="p">(</span><span class="n">sensors</span><span class="p">.</span><span class="n">getTempCByIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>스타벅스 속의 프로브…</p>

<p><img src="/assets/images/2022/probe-in-starbucks.jpg" alt="Probe in Starbucks" /></p>

<p><img src="/assets/images/2022/arduino-plotter.jpg" alt="DS18B20" /></p>

<p>얼추 따뜻한 물과 찬물 구분이 되는걸 확인했다.
근데 <a href="https://www.hannainst.com/marine-salinity-tester-hi98319.html">아무래도 중국산이다보니 측정되는 숫자를 못 믿겠어서 믿을만한 다른 수온계와 비교측정을 했다</a>.
내가 사용할 섭씨 20~35도 구간에서 1도 정도 높게 측정되는 걸 출력값에 반영토록 보정했다.</p>

<h2 id="oled-액정에-보여주기">OLED 액정에 보여주기</h2>

<p>데이터는 장치에서 바로 보여주어야 시인성도 높다.
어디서 언제 산지 모른 <code class="language-plaintext highlighter-rouge">SSD1306 모듈</code>을 추가로 달고, <a href="https://www.arduino.cc/reference/en/libraries/adafruit-ssd1306/"><code class="language-plaintext highlighter-rouge">Adafruit SSD1306</code></a>, <a href="https://www.arduino.cc/reference/en/libraries/adafruit-gfx-library/"><code class="language-plaintext highlighter-rouge">Adafruit_GFX</code></a> 라이브러리를 추가했다.</p>

<p>연결은 다음과 같이…</p>

<p><img src="/assets/images/2022/SSD1306.png" alt="DS18B20" /></p>

<p>추가되는 소스 만 보자.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;Adafruit_GFX.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_SSD1306.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET     4
#define ONE_WIRE_BUS   2
</span>
<span class="n">Adafruit_SSD1306</span> <span class="nf">display</span><span class="p">(</span><span class="n">SCREEN_WIDTH</span><span class="p">,</span> <span class="n">SCREEN_HEIGHT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Wire</span><span class="p">,</span> <span class="n">OLED_RESET</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">display</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">SSD1306_SWITCHCAPVCC</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">clearDisplay</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">display</span><span class="p">.</span><span class="n">clearDisplay</span><span class="p">();</span>
  <span class="n">display</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="mf">1.5</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">setTextColor</span><span class="p">(</span><span class="n">WHITE</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">28</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Temperature: "</span> <span class="o">+</span> <span class="n">String</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>
  <span class="n">display</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>

  <span class="n">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>점점 모양을 갖춰간다. 이제 컴퓨터에 연결하여 시리얼 모니터를 볼 필요 없이 OLED 액정을 보면 된다.
3초마다 측정된 온도가 나타난다. 추후 다른 센서 모듈을 추가하면 계기판처럼 쓸 수도 있겠다.</p>

<p><img src="/assets/images/2022/SSD1306.jpg" alt="SSD1306" /></p>

<h2 id="wi-fi에-연결하자">Wi-Fi에 연결하자</h2>

<p><a href="https://www.arduino.cc/reference/en/libraries/wifinina/"><code class="language-plaintext highlighter-rouge">WiFiNINA</code></a> 라이브러리를 추가했다.
펌웨어 업데이트 중 실수로 보드 WiFi 모듈이 벽돌이 되어버렸다.
많이 해맸는데 <a href="https://arduino.github.io/arduino-fwuploader/1.0/commands/arduino-fwuploader_firmware_flash/">커맨드라인 툴로 업데이트하면서 해결됐다.</a>
Arduino Uno WiFi Rev2의 보드명은 <code class="language-plaintext highlighter-rouge">arduino:megaavr:uno2018</code>이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./arduino-fwuploader firmware flash <span class="nt">-b</span> arduino:megaavr:uno2018 <span class="nt">-a</span> COM3
</code></pre></div></div>

<p>추가될 부분만 살펴보자.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;SPI.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;WiFiNINA.h&gt;</span><span class="cp">
</span>
<span class="cp">#define WIFI_SSID     "&lt;Wi-Fi 네트워크 SSID 이름&gt;"
#define WIFI_PASSWORD "&lt;Wi-Fi 네트워크 비밀번호&gt;"
</span>
<span class="n">WiFiClient</span>        <span class="n">client</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">status</span><span class="p">()</span> <span class="o">!=</span> <span class="n">WL_CONNECTED</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"."</span><span class="p">);</span>
      <span class="n">WiFi</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">WIFI_SSID</span><span class="p">,</span> <span class="n">WIFI_PASSWORD</span><span class="p">);</span>
      <span class="n">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Connected to the Wi-Fi network"</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="mqtt-broker에-메시지를-보내자">MQTT Broker에 메시지를 보내자</h2>

<p>Home Assistant가 인식할 수 있는 MQTT 메시지 포맷을 쉽게 구성해주는 라이브러리가 있을 것 같았다.
바퀴를 다시 발명할 필요 없다. 검색된 라이브러리 중 사용법이 간단한 <a href="https://www.arduino.cc/reference/en/libraries/home-assistant-integration/"><code class="language-plaintext highlighter-rouge">home-assistant-integration</code></a>를 선택했다.</p>

<p><img src="/assets/images/2022/home_assistant_library.png" alt="Home Assistant 관련 라이브러리" /></p>

<p>예외처리를 만들고 프로그램 완결성을 높였다.
이름은 거창하게 <code class="language-plaintext highlighter-rouge">Reef Sense</code>로 지었다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;OneWire.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;WiFiNINA.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;DallasTemperature.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_GFX.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Adafruit_SSD1306.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ArduinoHA.h&gt;</span><span class="cp">
</span>
<span class="cp">#define ONE_WIRE_BUS 2
</span>
<span class="cp">#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET     4
#define ONE_WIRE_BUS   2
</span>
<span class="cp">#define BROKER_ADDR         IPAddress(192,168,&lt;IP&gt;,&lt;주소&gt;)
#define BROKER_USERNAME     "&lt;MQTT BROKER USERNAME&gt;"
#define BROKER_PASSWORD     "&lt;MQTT BROKER PASSWORD&gt;"
</span>
<span class="cp">#define WIFI_SSID     "&lt;Wi-Fi 네트워크 SSID 이름&gt;"
#define WIFI_PASSWORD "&lt;Wi-Fi 네트워크 비밀번호&gt;"
</span>
<span class="cp">#define VERSION "2022.9.25"
</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">lastSentAt</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
<span class="n">byte</span> <span class="n">mac</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0x00</span><span class="p">,</span> <span class="s">"&lt;MAC&gt;"</span><span class="p">,</span> <span class="s">"&lt;주소&gt;"</span><span class="p">,</span> <span class="s">"&lt;16진수로&gt;"</span><span class="p">,</span> <span class="s">"&lt;넣기&gt;"</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">};</span>

<span class="n">OneWire</span> <span class="nf">oneWire</span><span class="p">(</span><span class="n">ONE_WIRE_BUS</span><span class="p">);</span>
<span class="n">DallasTemperature</span> <span class="nf">sensors</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oneWire</span><span class="p">);</span>
<span class="n">Adafruit_SSD1306</span> <span class="nf">display</span><span class="p">(</span><span class="n">SCREEN_WIDTH</span><span class="p">,</span> <span class="n">SCREEN_HEIGHT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Wire</span><span class="p">,</span> <span class="n">OLED_RESET</span><span class="p">);</span>
<span class="n">WiFiClient</span> <span class="n">client</span><span class="p">;</span>
<span class="n">HADevice</span> <span class="nf">device</span><span class="p">(</span><span class="n">mac</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mac</span><span class="p">));</span>
<span class="n">HAMqtt</span> <span class="nf">mqtt</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">device</span><span class="p">);</span>
<span class="n">HASensor</span> <span class="nf">temperature_sensor</span><span class="p">(</span><span class="s">"reefer_temperature"</span><span class="p">);</span>

<span class="kt">float</span> <span class="nf">measure_temperature</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">sensors</span><span class="p">.</span><span class="n">requestTemperatures</span><span class="p">();</span>
  <span class="kt">float</span> <span class="n">temperature</span> <span class="o">=</span> <span class="p">(</span><span class="n">round</span><span class="p">(</span><span class="n">sensors</span><span class="p">.</span><span class="n">getTempCByIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">temperature</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">print_display</span><span class="p">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">display</span><span class="p">.</span><span class="n">clearDisplay</span><span class="p">();</span>
  <span class="n">display</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="mf">1.5</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">setCursor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">setTextColor</span><span class="p">(</span><span class="n">WHITE</span><span class="p">);</span>
  
  <span class="n">display</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Temperature: "</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">temperature</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">status</span><span class="p">()</span> <span class="o">==</span> <span class="n">WL_CONNECTED</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Wi-Fi:   Connected"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Wi-Fi:   Disconnected"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">mqtt</span><span class="p">.</span><span class="n">isConnected</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"MQTT:    Connected"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"MQTT:    Disconnected"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">display</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Version: "</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">VERSION</span><span class="p">);</span>

  <span class="n">display</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"[0] Serial Initiated..."</span><span class="p">);</span>
  
  <span class="n">sensors</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
  <span class="n">temperature_sensor</span><span class="p">.</span><span class="n">setName</span><span class="p">(</span><span class="s">"Reefer Temperature"</span><span class="p">);</span>
  <span class="n">temperature_sensor</span><span class="p">.</span><span class="n">setDeviceClass</span><span class="p">(</span><span class="s">"temperature"</span><span class="p">);</span>
  <span class="n">temperature_sensor</span><span class="p">.</span><span class="n">setUnitOfMeasurement</span><span class="p">(</span><span class="s">"℃"</span><span class="p">);</span>
  <span class="n">temperature_sensor</span><span class="p">.</span><span class="n">setIcon</span><span class="p">(</span><span class="s">"mdi:water-thermometer"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"[1] Sensor Initiated..."</span><span class="p">);</span>

  <span class="n">display</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">SSD1306_SWITCHCAPVCC</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">);</span>
  <span class="n">display</span><span class="p">.</span><span class="n">clearDisplay</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"[2] Display Initiated..."</span><span class="p">);</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">status</span><span class="p">()</span> <span class="o">!=</span> <span class="n">WL_CONNECTED</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"[3] Wi-fi Failed to connect..."</span><span class="p">);</span>
    <span class="n">WiFi</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">WIFI_SSID</span><span class="p">,</span> <span class="n">WIFI_PASSWORD</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"[3] Wi-Fi Connected..."</span><span class="p">);</span>

  <span class="n">device</span><span class="p">.</span><span class="n">setName</span><span class="p">(</span><span class="s">"Arduino Reef Sense"</span><span class="p">);</span>
  <span class="n">device</span><span class="p">.</span><span class="n">setSoftwareVersion</span><span class="p">(</span><span class="n">VERSION</span><span class="p">);</span>
  <span class="n">device</span><span class="p">.</span><span class="n">setModel</span><span class="p">(</span><span class="s">"Arduino Uno WiFi Rev2"</span><span class="p">);</span>
  <span class="n">device</span><span class="p">.</span><span class="n">setManufacturer</span><span class="p">(</span><span class="s">"Jihun Roh"</span><span class="p">);</span>

  <span class="n">mqtt</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">BROKER_ADDR</span><span class="p">,</span> <span class="n">BROKER_USERNAME</span><span class="p">,</span> <span class="n">BROKER_PASSWORD</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"[4] MQTT Connected..."</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">sensors</span><span class="p">.</span><span class="n">requestTemperatures</span><span class="p">();</span>
  <span class="kt">float</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">measure_temperature</span><span class="p">();</span>
  <span class="n">print_display</span><span class="p">(</span><span class="n">temperature</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">((</span><span class="n">millis</span><span class="p">()</span> <span class="o">-</span> <span class="n">lastSentAt</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">lastSentAt</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
    <span class="n">temperature_sensor</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">temperature</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">mqtt</span><span class="p">.</span><span class="n">loop</span><span class="p">();</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="마무리">마무리</h2>

<p>최종 작동 모습이다. 주말 틈틈히 작업한 보람이 LED에 보인다.
LED에는 수온 뿐만 아니라 Wi-Fi 연결, MQTT 연결이 잘 되었는지도 표현되게 하였다.</p>

<p><img src="/assets/images/2022/reef_sense.jpg" alt="최종 작동모습" /></p>

<p>이렇게 준비한 이른바 <code class="language-plaintext highlighter-rouge">Reef Sense</code>를 어항 밑 섬프항에 놓아두었다.
프로브는 히터나 모터 등 열을 발산하는 곳으로부터 멀리 두어야 신뢰할만한 값을 측정할 수 있다.
나는 본수조로부터 섬프항으로 내려오는 파이프 앞에 프로브를 두었다.</p>

<p><img src="/assets/images/2022/reef_sense_in_real_world.jpg" alt="실제 장착모습" /></p>

<p>Home Assistant에 UI를 달았다. 아직 기본적인 UI지만, 사용성이 높게 수정해나가야 한다.</p>

<p><img src="/assets/images/2022/home_assistant_lovelace.png" alt="Home Assistant Lovelace 모습" /></p>

<h2 id="tbd">TBD</h2>

<ul>
  <li>빵판에 주렁주렁 달아놓은 전선을 적절한 박스로 포장한다.</li>
  <li>집에 PH 센서와 프로브 남는 것이 있는데 이것도 달아야 겠다.</li>
  <li>용존산소 등 다른 센서도 알아본다.</li>
  <li>UI를 더 직관적이고 이쁘게 꾸민다.</li>
  <li>겨울철을 앞두고 이 값을 기반으로 수온이 적정범위를 벗어났을 때, 알림을 뜨도록 하고 여유 히터를 작동토록 하는 자동화를 만들 생각이다.</li>
</ul>]]></content><author><name>노지훈</name></author><category term="IoT" /><category term="Reef" /><summary type="html"><![CDATA[간만에 여유가 있어, 오래전 홀린듯이 사두었던 Arduino Uno WiFi Rev2 보드로 어항 수온 센서를 만들었다. 어항 수온계는 제품이 워낙 많지만, Home Assistant 같은 IoT 플랫폼에서 데이터를 수집할 수 있는 제품은 발견치 못했다. 만들만 하다고 생각했다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/2022/reef_sense.jpg" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/2022/reef_sense.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">이산화탄소 절대음감(?)의 실내공기 관리</title><link href="https://jihunroh.github.io/2022/09/11/%EC%9D%B4%EC%82%B0%ED%99%94%ED%83%84%EC%86%8C-%EC%A0%88%EB%8C%80%EC%9D%8C%EA%B0%90%EC%9D%98-%EC%8B%A4%EB%82%B4%EA%B3%B5%EA%B8%B0-%EA%B4%80%EB%A6%AC/" rel="alternate" type="text/html" title="이산화탄소 절대음감(?)의 실내공기 관리" /><published>2022-09-11T00:00:00+09:00</published><updated>2022-09-11T00:00:00+09:00</updated><id>https://jihunroh.github.io/2022/09/11/%EC%9D%B4%EC%82%B0%ED%99%94%ED%83%84%EC%86%8C%20%EC%A0%88%EB%8C%80%EC%9D%8C%EA%B0%90%EC%9D%98%20%EC%8B%A4%EB%82%B4%EA%B3%B5%EA%B8%B0%20%EA%B4%80%EB%A6%AC</id><content type="html" xml:base="https://jihunroh.github.io/2022/09/11/%EC%9D%B4%EC%82%B0%ED%99%94%ED%83%84%EC%86%8C-%EC%A0%88%EB%8C%80%EC%9D%8C%EA%B0%90%EC%9D%98-%EC%8B%A4%EB%82%B4%EA%B3%B5%EA%B8%B0-%EA%B4%80%EB%A6%AC/"><![CDATA[<h2 id="가혹한-공기질-환경">가혹한 공기질 환경</h2>

<p>쾌적한 실내 공기질을 유지하려 한다면 어떤 변수에 신경써야나?
실내 공기질을 말할 때 많이 언급하는 변수가 5개는 되는 것 같다.</p>

<ul>
  <li>기온</li>
  <li>습도</li>
  <li>이산화탄소 농도</li>
  <li>VOC(휘발성 유기화합물) 농도</li>
  <li>PM (미세먼지) 농도</li>
</ul>

<p>한국에서 우리 공기질 환경은 충분히 가혹하다.
겨울은 너무 춥고 건조해서 아침마다 코피가 난다. 여름에는 콧속 사이사이를 더운 증기가 채우는 느낌이다.
사시사철 문제도 있다. 대여섯시간 동안 환기를 안하면 끕끕하고 퀘퀘한 느낌을 참기 어렵다.
환기했더니 오히려 미세먼지가 유입되는 경우도 많다.</p>

<h2 id="iot를-시작하는-이유">IoT를 시작하는 이유</h2>

<p>여기서 시작된다. 이런 질문을 스스로 하고 있다면 당신은 IoT의 피가 온몸에 흐르고 있다.</p>

<ul>
  <li>덥다는 느낌이 들고서야 사후적으로 에어컨을 켜거나 목표온도를 낮추는 건, 어쩐지 4차 산업혁명 시대에 사는 느낌이 아니다.</li>
  <li>리모컨을 찾기 귀찮다!</li>
  <li>실내 기온을 느끼고 에어컨을 조작하는 하찮은 행동따위에 내 고도의 지성을 쓸 시간이 아깝다</li>
  <li>난 과학을 믿는다, 이 모든 걸 과학적으로 할 수 있다고 생각한다!</li>
</ul>

<p>NASA는 <code class="language-plaintext highlighter-rouge">인간은 비선형처리가 가능한 가장 값싼 컴퓨터 시스템</code>이라고 했다.
우린 온도가 27도가 넘을 때 리모컨으로 에어컨 제습기능을 켜고,
미세먼지 농도가 높으면 공기청정기을 켜면 된다.</p>

<p>그런데 NASA도 인정하는 가장 값싼 비선형처리 컴퓨터 시스템이 이런 선형적이고 일상적인 일을 하고 있는게 이해되지 않을 때
비로소 IoT를 필요로 하게 된다.</p>

<h2 id="그럼-측정과-저장부터">그럼 측정과 저장부터…</h2>

<p>우리집은 방마다 <a href="https://www.getawair.com/products/element">Awair Element</a>를 설치해놓았다(내돈내산).
출시된지 2년쯤 되었지만 인테리어 템이 될 정도로 만듦새가 좋아서 세간에서 여전히 인기가 많다.
인기만큼 가격은 덤, 현재 가격은 개당 $299달러다.
처음 샀을 때보다 가격이 50% 이상 오른 듯.</p>

<p><img src="/assets/images/2022/awair_element_1.jpg" alt="거실 Awair Element" /></p>

<p><img src="/assets/images/2022/awair_element_2.jpg" alt="서재 Awair Element" /></p>

<p>이 측정기는 이쁠 뿐만 아니라 플랫폼이 제법 다재다능한데,
측정한 공기질을 서버에 저장하고 <a href="https://play.google.com/store/apps/details?id=co.bitfinder.awair&amp;hl=ko&amp;gl=US">모바일앱</a>으로 보여준다.
일반 사용자라면 모바일앱을 쓰면서 손수 환기를 하건, 공기청정기나 에어컨, 제습기 따위를 조작하면 된다.</p>

<p><img src="/assets/images/2022/awair_app.webp" alt="Awair Mobile App" /></p>

<p>데이터 수집은 필수적이다.
<a href="https://support.getawair.com/hc/en-us/articles/360049221014-Awair-Element-Local-API-Feature">Awair는 친절하게도 API를 제공하기에</a>,
나는 우리집 Home Assistant 플랫폼에 데이터를 끌여들일 수 있었다.
이렇게 간단한 <code class="language-plaintext highlighter-rouge">YAML</code> 코드로 Awair Element가 수집하고 있는 데이터를 내 Home Assistant 시스템에도 저장할 수 있다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sensor</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">rest</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">거실 어웨어</span>
    <span class="na">json_attributes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">temp</span>
      <span class="pi">-</span> <span class="s">humid</span>
      <span class="pi">-</span> <span class="s">co2</span>
      <span class="pi">-</span> <span class="s">voc</span>
      <span class="pi">-</span> <span class="s">pm25</span>
    <span class="na">resource</span><span class="pi">:</span> <span class="s">Awair의 로컬 IP 주소</span>
    <span class="na">value_template</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>
    <span class="na">scan_interval</span><span class="pi">:</span> <span class="m">60</span>
</code></pre></div></div>

<p>데이터는 Home Asssistant의 데이터베이스에 14일간 저장해놓고 있다.
이 데이터는 Home Assistant에서 다양한 방법으로 나타낼 수 있지만, <a href="https://github.com/kalkih/mini-graph-card">Mini Graph Card</a>를 이용해 현재값과 트렌드를 간략히 보여주도록 했다.
기온과 습도로 <a href="https://ko.wikipedia.org/wiki/%EB%B6%88%EC%BE%8C%EC%A7%80%EC%88%98">불쾌지수</a> 계산도 가능하다.</p>

<p><img src="/assets/images/2022/awiar_sensing.webp" alt="Awair 측정결과" /></p>

<h2 id="문제-해결을-위한-자동화">문제 해결을 위한 자동화…</h2>

<p>이 데이터로 실내 이산화탄소 농도가 700ppm보다 높아지면 전열교환기를 작동하도록 하고 있다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">automation</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">전열교환기 켜기 자동화</span>
    <span class="na">trigger</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">numeric_state</span>
        <span class="na">above</span><span class="pi">:</span> <span class="s1">'</span><span class="s">700'</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">sensor.geosil_co2</span>
    <span class="na">action</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">fan.turn_on</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">fan.jeonyeolgyohwangi</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">single</span>
</code></pre></div></div>

<p>우리집에서는 집에 사람이 있는지, 겨울철이라 전열교환 기능을 쓸지 말지 등에 따라,
위 스크립트를 변용해서 쓰고 있다.</p>

<p>그럼 전열교환기는 언제 멈추는가?
trigger에 따라 다양한 방법으로 구현할 수 있는데,
난 전열교환기가 켜지면 자동화 스크립트가 시작되어 이산화탄소 농도가 600ppm보다 낮아질 때까지 작동하도록 하고 있다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">automation</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">alias</span><span class="pi">:</span> <span class="s">전열교환기 끄기 자동화</span>
    <span class="na">trigger</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">platform</span><span class="pi">:</span> <span class="s">state</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">fan.jeonyeolgyohwangi</span>
        <span class="na">from</span><span class="pi">:</span> <span class="s1">'</span><span class="s">off'</span>
        <span class="na">to</span><span class="pi">:</span> <span class="s1">'</span><span class="s">on'</span>
    <span class="na">action</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">wait_template</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">states('sensor.average_co2')</span><span class="nv"> </span><span class="s">|</span><span class="nv"> </span><span class="s">float</span><span class="nv"> </span><span class="s">&lt;</span><span class="nv"> </span><span class="s">600</span><span class="nv"> </span><span class="s">}}"</span>
      <span class="pi">-</span> <span class="na">service</span><span class="pi">:</span> <span class="s">fan.turn_off</span>
        <span class="na">entity_id</span><span class="pi">:</span> <span class="s">fan.jeonyeolgyohwangi</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">restart</span>
</code></pre></div></div>

<p>이게 가장 간단한 자동화다. 위 코드 밑에는 RS485로 통신하는 전열교환기의 패킷을 납치하여 조작하는 것, Awair Element의 데이터를 REST로 가져오는 것 등이 숨어있지만,
기본 흐름을 보여주기에는 충분한 것 같다.</p>

<p>그리고 실제로 이 자동화 스크립트는 전열교환기 만으로 이산화탄소 농도 저감이 가능하다는 가정을 하고 있다.
집 안에서 이산화탄소 탄소를 내뿜는 사람이 많다면, 전열교환기로 아무리 환기를 한들, 이산화탄소 평형점은 올라갈 수 밖에 없다.</p>

<p>이러한 평형점이 쾌쾌한 공기라는 게 느껴질 정도인 1,000ppm을 넘는다면?
이 때는 전열교환기가 아니라, 창문 자동개폐기를 써야 한다.</p>]]></content><author><name>노지훈</name></author><category term="IoT" /><summary type="html"><![CDATA[가혹한 공기질 환경]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/2022/awair_app.webp" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/2022/awair_app.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">우리집 IoT를 인프라부터 소개합니다</title><link href="https://jihunroh.github.io/2022/08/07/%EB%82%B4-%ED%99%88-IoT%EB%A5%BC-%EC%86%8C%EA%B0%9C%ED%95%A9%EB%8B%88%EB%8B%A4/" rel="alternate" type="text/html" title="우리집 IoT를 인프라부터 소개합니다" /><published>2022-08-07T00:00:00+09:00</published><updated>2022-08-07T00:00:00+09:00</updated><id>https://jihunroh.github.io/2022/08/07/%EB%82%B4%20%ED%99%88%20IoT%EB%A5%BC%20%EC%86%8C%EA%B0%9C%ED%95%A9%EB%8B%88%EB%8B%A4</id><content type="html" xml:base="https://jihunroh.github.io/2022/08/07/%EB%82%B4-%ED%99%88-IoT%EB%A5%BC-%EC%86%8C%EA%B0%9C%ED%95%A9%EB%8B%88%EB%8B%A4/"><![CDATA[<p>근 3년간 집에서 갈고닦아 쓰고 있는 IoT 환경을 소개한다.</p>

<h2 id="시스템-intel-nuc--manjaro-linux">시스템: <a href="https://www.intel.co.kr/content/www/kr/ko/products/sku/214624/intel-nuc-kit-nuc7cjyhn/specifications.html">Intel NUC</a> + <a href="https://manjaro.org/">Manjaro Linux</a></h2>

<p>2019년부터 ARM 기반의 Raspberrypi를 쓰다가, 2022년 초부터 AMD64 기반의 Intel NUC(NUC7CJYHN)를 쓰고 있다.
Raspberrypi OS, Ubuntu도 오래 썼지만, Manjaro Linux에 만족스럽게 정착 중이다.</p>

<p><img src="/assets/images/nairobi.webp" alt="Nairobi 모습" />
<em>물론 서버는 와이프가 보지 못하게 소파 뒤에 숨겨놓고 쓴다.</em></p>

<h2 id="iot-플랫폼-home-assistant">IoT 플랫폼: <a href="https://www.home-assistant.io/">Home Assistant</a></h2>

<p>인기 많은 <a href="https://www.smartthings.com/">Smartthings</a>를 3개월 정도 쓰다가,
문자 기반 인터페이스(CUI)가 성격에 맞았기에 <a href="https://www.home-assistant.io/">Home Assistant</a>로 전향했다.</p>

<p><a href="https://github.com/jihunroh/homeassistant-configuration">우리집 IoT 시스템의 작동 코드를 GitHub에서 관리하고 있다.</a>
그간 오랜 누더기질 덕분에 2022.8월초 현재 코드줄 수는 7천줄에 이른다. <del>배보다 배꼽이 더…</del></p>

<p><img src="/assets/images/homeassistant-integration.webp" alt="Home Assistant Integration 모습" />
<em>집에서 Home Assistant로 사용 중인 확장</em></p>

<h2 id="통신방식-zigbee-80--others-20">통신방식: Zigbee 80% + Others 20%</h2>

<p>사물이 허브와 통신하는 방식은 ZigBee, Z-Wave, Wi-Fi, Bluetooth, RF 등이 있다.
<del>상황에 따라 통신 방식을 선택해야 한다.</del>
IoT 하는 여는 사람들처럼 저전력이고 네트워크 부하가 적은 ZigBee를 좋아하지만, 마음에 드는 사물의 통신방식을 받아들일 수 밖에 없다.</p>

<p>내가 쓰는 사물 대부분이 ZigBee로 허브와 통신한다.
Zigbee 네트워크를 구성하기 위한 게이트웨이로 CC2538을 연결했다.
<a href="https://www.zigbee2mqtt.io/information/supported_adapters.html">CC2531, CC2538, Conbee 등 다른 선택지도 많고 성능 차이가 있다.</a></p>

<p><img src="/assets/images/cc2538.webp" alt="CC2538 연결 모습" />
<em>CC2538을 Intel NUC에 연결한 모습</em></p>

<p>Wi-Fi 기반 사물은 Awair 공기질 측정기나 Xiaomi 로봇청소기 같이 API를 제공하고 있는 경우만 제한적으로 쓰고 있다.
마찬가지로 Bluetooth 기반 사물로 SwitchBot을 써서 커피머신에 붙여쓰고 있다.
SwitchBot은 Home Assistant가 빌트인으로 지원하고 있다.</p>

<p><a href="http://127.0.0.1:4000/2020/10/03/월패드-원격제어를-위한-RS485-패킷-분석-준비/">RS485 방식으로 통신하는 월패드는 월패드 뒷면을 따서 패킷을 훔쳐쓰고 있다.</a>
RS485 패킷과 TCP/IP 소켓 통신간 어댑터인 Elfin EW11을 이용하고 있다.
패킷을 감청하면, 예컨대 월패드로 난방을 켰을 때 어떤 신호가 오가는지를 캡춰할 수 있게 된다.
그래서 내가 원할 때 같은 신호를 RS485에 흘려주면 난방을 킬 수 있다.
<a href="https://github.com/jihunroh/rs485_2mqtt">직접 해석한 패킷을 Home Assistant에서 조작할 수 있도록 별도 프로그램을 작성해서 쓰고 있다</a>.</p>

<h2 id="하고있는-것">하고있는 것</h2>

<p>IoT가 뭔지 모르는 와이프도 별도로 사용법을 알 필요 없이 작동하는 자동화를 지향하고 있다.
<a href="https://github.com/jihunroh/homeassistant-configuration/tree/master/automations">Github 저장소에서 내가 쓰고 있는 자동화를 확인할 수 있다.</a>
약 70개에 가까운 자동화 코드를 쓰고 있는데, 시간이 될 때 소개해보려 한다.</p>]]></content><author><name>노지훈</name></author><category term="IoT" /><summary type="html"><![CDATA[근 3년간 집에서 갈고닦아 쓰고 있는 IoT 환경을 소개한다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/covers/iot.jpg" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/covers/iot.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">내가 글을 웹에 올리는 방법은?</title><link href="https://jihunroh.github.io/2022/07/10/%EB%82%B4%EA%B0%80-%EA%B8%80%EC%9D%84-%EC%9B%B9%EC%97%90-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80/" rel="alternate" type="text/html" title="내가 글을 웹에 올리는 방법은?" /><published>2022-07-10T00:00:00+09:00</published><updated>2022-07-10T00:00:00+09:00</updated><id>https://jihunroh.github.io/2022/07/10/%EB%82%B4%EA%B0%80%20%EA%B8%80%EC%9D%84%20%EC%9B%B9%EC%97%90%20%EC%98%AC%EB%A6%AC%EB%8A%94%20%EB%B0%A9%EB%B2%95%EC%9D%80</id><content type="html" xml:base="https://jihunroh.github.io/2022/07/10/%EB%82%B4%EA%B0%80-%EA%B8%80%EC%9D%84-%EC%9B%B9%EC%97%90-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80/"><![CDATA[<p>이 웹사이트는 Ruby 기반인 Jekyll로 만들었다.
개발자들이 많이 써온 프로그램인데, 2014년부터 써왔더니 나도 제법 쓸줄 안다.
next.js 같은 더 현대적인 프로그램들이 각광받는 요즘에도,
오히려 투박해서 매력적인 프로그램이다.</p>

<p>이 프로그램을 쓰는 방법은 개발자에겐 쉽겠지만 나한테 그렇지 않았다.
수많은 시행착오를 거쳐서야, 내게 가장 최적인 방식을 찾게 됐다.</p>

<p>간만에 GitHub를 둘러보다가, 수년 전 한참 애먹었던 Continuous Integration이
Actions이라는 이름으로 서비스화되어 있었다. 주말에 장난감처럼 빠져 놀았다.</p>

<h2 id="환경-만들기">환경 만들기</h2>

<p><a href="https://jekyllrb.com/docs/installation/windows/#installation-via-bash-on-windows-10">Windows Subsystem for Linux에 Jekyll을 이용하는 환경을 만든다.</a>
집에 다용도로 쓰는 리눅스 서버가 있어 Build를 맡겨 보았지만 WSL만큼 편리할 수는 없었다.
특히나 저전력 서버이다 보니 상시 구동 중인 IoT 프로그램들과 자원을 나눠먹기 어려웠다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># WSL 설정: on Bash Shell</span>

<span class="nb">sudo </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt-get upgrade <span class="nt">-y</span>
<span class="c"># 시간이 오래 걸리는 작업이므로 powershell에서 wsl --export Ubuntu Ubuntu.tar로 백업해두는 것이 좋다.</span>

<span class="nb">sudo </span>apt <span class="nb">install </span>ruby-bundler ruby2.7-dev build-essential dh-autoreconf zlib1g-dev libffi-dev libssl-dev
<span class="nb">cd </span>REPOSITORY_PATH
bundle <span class="nb">install</span>
</code></pre></div></div>

<h2 id="배포하기">배포하기</h2>

<p>4~5년 전쯤엔 3rd-party 플러그인을 쓰려면 Travis-CI나 Netlify을 썼었다.
지금은 GitHub Actions으로 GitHub 내에서 3rd-party 플러그인도 이용하여 배포까지 할 수 있다.
이 웹사이트에도 간단한 플러그인을 작성해서 적용하고 있다.</p>

<p><a href="https://jekyllrb.com/docs/continuous-integration/github-actions/#setting-up-the-action">Jekyll 공식문서 예제</a>를 조금 변형해서, 
<a href="https://github.com/jihunroh/jihunroh.github.io/blob/main/.github/workflows/jekyll.yml">Workflow를 만들었다.</a>
<code class="language-plaintext highlighter-rouge">main</code> branch가 Workflow를 거친 후 나온 결과물은 <code class="language-plaintext highlighter-rouge">gh-pages</code> branch에 저장된다.
<code class="language-plaintext highlighter-rouge">gh-pages</code> branch는 Github Pages의 전통적인 기능에 따라 <code class="language-plaintext highlighter-rouge">https://jihunroh.github.io</code>에 결과물을 게시한다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Build and deploy Jekyll site to GitHub Pages</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">main"</span> <span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>

    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cache gems</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">vendor/bundle</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gems-${{ hashFiles('**/Gemfile') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">${{ runner.os }}-gems-</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build &amp; Deploy to GitHub Pages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">helaili/jekyll-action@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">target_branch</span><span class="pi">:</span> <span class="s">gh-pages</span>
        <span class="na">target_path</span><span class="pi">:</span> <span class="s">/</span>
        <span class="na">token</span><span class="pi">:</span> <span class="s">${{ secrets.GH_TOKEN }}</span>
</code></pre></div></div>

<p>오랜 고질병처럼 글쓰기보단 글쓰는 프로그램에 몰두하게 된다.
2022년 하반기 목표가 일이건, 공부건 <code class="language-plaintext highlighter-rouge">하는 모든 일을 여과없이 기록</code>하는 건데 도움이 될 수도?</p>]]></content><author><name>노지훈</name></author><category term="Jekyll" /><summary type="html"><![CDATA[이 웹사이트는 Ruby 기반인 Jekyll로 만들었다. 개발자들이 많이 써온 프로그램인데, 2014년부터 써왔더니 나도 제법 쓸줄 안다. next.js 같은 더 현대적인 프로그램들이 각광받는 요즘에도, 오히려 투박해서 매력적인 프로그램이다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/2022/continuous_deployment.webp" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/2022/continuous_deployment.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">탄소중립을 위한 행동은 왜 어려울까</title><link href="https://jihunroh.github.io/2021/10/04/%ED%83%84%EC%86%8C%EC%A4%91%EB%A6%BD%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%96%89%EB%8F%99%EC%9D%80-%EC%99%9C-%EC%96%B4%EB%A0%A4%EC%9A%B8%EA%B9%8C/" rel="alternate" type="text/html" title="탄소중립을 위한 행동은 왜 어려울까" /><published>2021-10-04T00:00:00+09:00</published><updated>2021-10-04T00:00:00+09:00</updated><id>https://jihunroh.github.io/2021/10/04/%ED%83%84%EC%86%8C%EC%A4%91%EB%A6%BD%EC%9D%84%20%EC%9C%84%ED%95%9C%20%ED%96%89%EB%8F%99%EC%9D%80%20%EC%99%9C%20%EC%96%B4%EB%A0%A4%EC%9A%B8%EA%B9%8C</id><content type="html" xml:base="https://jihunroh.github.io/2021/10/04/%ED%83%84%EC%86%8C%EC%A4%91%EB%A6%BD%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%96%89%EB%8F%99%EC%9D%80-%EC%99%9C-%EC%96%B4%EB%A0%A4%EC%9A%B8%EA%B9%8C/"><![CDATA[<p>나는 1년 전부터 바닷물고기를 키우고 있다. 야밤에 집안 조명들을 모두 끈 어둠 속에서 심연의 바다 한 조각을 바라보고 있으면 영롱하기 그지 없다.
이 취미는 요즘 내 업무분야인 ‘탄소중립’과도 밀접한 관련이 있는데, 어항이 본질적으로 ‘해양생태계의 질소순환 과정’을 좁은 공간 안에 구겨넣은 미니어쳐이기 때문이다.</p>

<p>어항에 투여된 물고기 사료는 질소를 품은 유기물이라서, 물고기, 박테리아의 소화 과정에서 암모니아 및 아질산염을 거쳐, 종국적으로는 질산염이 되어 어항에 누적된다.
본래 해양 생태계에서는 해조류가 광합성을 하며 질산염을 소모하여 질산염의 균형(이른바 질소순환 과정)을 이루는데, 그렇다고 어항에서 미역을 키울 수는 없는 노릇이다.
누적된 질산염은 물고기 건강에 만성적인 악영향을 주기 때문에, 주기적으로 깨끗한 물로 갈아주거나 질산염을 질소분자로 변환하는 약품을 투여해야 한다.</p>

<p><img src="/assets/images/2021/10/aquarium.jpg" alt="우리집 해수어항" /></p>

<p><a href="https://microbewiki.kenyon.edu/index.php/Nitrosococcus_oceani"><img src="/assets/images/2020/08/marine-nitrification.jpg" alt="바다에서의 질소 순환 과정" /></a></p>

<p>탄소중립의 난해함은 어항 관리의 그것과 닮았다.
지구(어항)의 탄소(질산염) 항상성을 깨뜨리고 누적시키는 원인(사료 급여)은 물론, 해결법(물갈이, 약품 투여)까지 공히 알려져는 있는데, 대체 탄소(질산염)는 눈에 쉽게 보이질 않아 얼만큼 행동해야 할지를 모르겠다.
노력에는 돈과 시간이 들기 때문에 막연하게 최대한의 노력을 하고 싶지는 않은 것이다.</p>

<p><a href="https://www.bbc.com/future/article/20190304-human-evolution-means-we-can-tackle-climate-change">영국의 국제이슈 기고가 Matthew Wilburn King은 우리가 기후행동을 꺼려하는 이유를 짚는다</a>.
우리 인류의 뇌에는 수백만년에 걸쳐 여러 인지 편향이 각인되었는데, 기후행동은 미래의 가치/비용에 대한 과소평가, 방관자 효과, 매몰비용 오류 등과 엮여 실행하지 어렵다는 것이다.
이 인지 편향들은 매우 강렬하다고 알려져 있어서, 다시 말하면 우리는 기후변화의 원인, 대응 필요성을 이해할 수는 있어도, 미래를 위한 일을 하는 데에는 좀처럼 성공하지 못한다. 소설가 김훈은 “밥벌이보다 숭고한 일은 없다”고 말했다. 이번달 나올 월급과 떼일 세금을 두고서는 “30년 후의 일인데 노력을 벌써부터 많이 해야하나<code class="language-plaintext highlighter-rouge">미래 과소평가</code>, 더 노력할 사람들이 많은데 내가 할 필요가 있을까?<code class="language-plaintext highlighter-rouge">방관자 효과</code>, 내연기관에 인류가 쏟은 돈이 얼만데 전기/수소차를 쓰라고?<code class="language-plaintext highlighter-rouge">매몰비용 오류</code>” 같은 생각이 아주 직관적인 접근이 되는 것이다.</p>

<p>기후환경 활동가들은 이러한 인지편향을 잘 이해하고 있는지, 사람들에게 강렬한 인상을 남기는 것이 해법이라고 생각하는 것 같다.
스웨덴의 만 16세 환경운동가 Greta Thunberg는 2019년 UN기후행동 정상회의 연단에서 “여러분은 헛된 말로 저의 꿈을 빼앗았습니다.
여러분이 할 수 있는 이야기는 전부 돈과 끝없는 경제성장의 신화 뿐입니다.
어떻게 그럴 수 있습니까?“라고 울먹이며 사람들의 큰 경각심을 불러일으켰다.
지구 온난화를 논할 때는 어김없이 작은 얼음 조각 위의 북극곰이 출연하고, 자원 재활용을 논할 때에는 폐플라스틱을 잔뜩 먹은 거북이가 등장한다.
얻는 기쁨보다 잃는 슬픔에 더 큰 의미를 두는 것이 인류의 오랜 부정 편향이다.
<a href="https://www.etnews.com/20140716000244">산업계가 2015년 시행될 온실가스배출권거래제를 두고 매년 30조원의 제조업 매출 감소를 겪게될 것이라고 경고한 점도 비슷한 전략이다</a>.
그야말로 편향을 전략적으로 이용하는 프레임 전투다.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/u9KxE4Kv9A8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p><img src="/assets/images/2021/10/polar_bear.jpg" alt="빙산조각 위의 북극곰" /></p>

<p>사람들이 더욱 체감하게 하기 위해, 해양에서 국소적으로 일어났던 ‘지구온난화’는 전지구적인 ‘기후변화’로, 중립적 의미의 ‘기후변화’는 다시 부정적 의미의 ‘기후위기’로 이슈 키워드가 변화해 가고 있다.
변화양상 속에서도 기후환경계와 경제산업계 간의 간극은 결코 좁혀지지 않을 것 같다.
요즘 나는 파리협약에 따라 당사국이 제출해야 하는 국가온실가스 감축목표(NDC)의 상향을 위해, 관계부처, 탄소중립위원회 등과 협의 중인데, 어느누구 간에는 서로 대화가 곤란할 정도의 치열한 감정싸움이 있다.</p>

<p>국토교통부는 탄소중립을 위한 건물의 에너지성능 향상, 전기/수소차 전환 가속화 등에서 과업을 설정하고자 노력 중이다.
나는 작년말 미래전략일자리담당관에서 탄소중립을 업무를 맡으면서 가졌던 뜨거운 지적 호기심을 기억한다.
하지만 업무과정에서 마주친 기후환경의 언어에는 잘 익숙해지지 못했다.
이 날선 프레임 전투 중에서, 쪽방촌에 연탄이 아닌 태양광패널 나눔봉사가 이뤄질 풍경,
화석연료의 불맛이 흠뻑 스민 옛날짬뽕을 그리워하는 모습,
쏟아지는 전기차 폐배터리로 골머리를 앓을 정부의 입장 등을 상상하며 유머를 찾는다.
이 모든 생각이 2021년 이 시대라는 우물 안에 살고 있기 때문에 갖게되는 아집일 수도 있기에, 머리쓰기보다 묵묵히 손부터 움직이려고 한다.</p>]]></content><author><name>노지훈</name></author><category term="탄소중립" /><summary type="html"><![CDATA[나는 1년 전부터 바닷물고기를 키우고 있다. 야밤에 집안 조명들을 모두 끈 어둠 속에서 심연의 바다 한 조각을 바라보고 있으면 영롱하기 그지 없다. 이 취미는 요즘 내 업무분야인 ‘탄소중립’과도 밀접한 관련이 있는데, 어항이 본질적으로 ‘해양생태계의 질소순환 과정’을 좁은 공간 안에 구겨넣은 미니어쳐이기 때문이다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/covers/20211004.webp" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/covers/20211004.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">모든 주식의 주가가 한 계단(tick) 오른다면 어떤 주식을 사야할까?</title><link href="https://jihunroh.github.io/2021/03/21/%EB%AA%A8%EB%93%A0-%EC%A3%BC%EC%8B%9D%EC%9D%98-%EC%A3%BC%EA%B0%80%EA%B0%80-%ED%95%9C-%EA%B3%84%EB%8B%A8(tick)-%EC%98%A4%EB%A5%B8%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%A3%BC%EC%8B%9D%EC%9D%84-%EC%82%AC%EC%95%BC%ED%95%A0%EA%B9%8C/" rel="alternate" type="text/html" title="모든 주식의 주가가 한 계단(tick) 오른다면 어떤 주식을 사야할까?" /><published>2021-03-21T00:00:00+09:00</published><updated>2021-03-21T00:00:00+09:00</updated><id>https://jihunroh.github.io/2021/03/21/%EB%AA%A8%EB%93%A0%20%EC%A3%BC%EC%8B%9D%EC%9D%98%20%EC%A3%BC%EA%B0%80%EA%B0%80%20%ED%95%9C%20%EA%B3%84%EB%8B%A8(tick)%20%EC%98%A4%EB%A5%B8%EB%8B%A4%EB%A9%B4%20%EC%96%B4%EB%96%A4%20%EC%A3%BC%EC%8B%9D%EC%9D%84%20%EC%82%AC%EC%95%BC%ED%95%A0%EA%B9%8C</id><content type="html" xml:base="https://jihunroh.github.io/2021/03/21/%EB%AA%A8%EB%93%A0-%EC%A3%BC%EC%8B%9D%EC%9D%98-%EC%A3%BC%EA%B0%80%EA%B0%80-%ED%95%9C-%EA%B3%84%EB%8B%A8(tick)-%EC%98%A4%EB%A5%B8%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%A3%BC%EC%8B%9D%EC%9D%84-%EC%82%AC%EC%95%BC%ED%95%A0%EA%B9%8C/"><![CDATA[<p>스캘핑과 스윙의 중간 어느 지점에서(?) 놀고 있다.</p>

<p>하루 내에 호가 단위(tick) 한단계 높여 실현하는 경우도 있고,
며칠을 두고 서너 단위를 높여 실현하기도 한다.</p>

<p>그래서 거래량이 많고(주문이 잘 체결되고), 주가에 비해(많이 살 수 있고) 호가 단위(tick)가 상대적으로 큰(많이 이득을 주는) 주식을 좋아한다.
직감이든 우연이든 <code class="language-plaintext highlighter-rouge">SK하이닉스</code>가 그런 주식이라 생각했는데, 맞는 생각인지 확인해봤다.</p>

<p>질문을 다시 구성한다면 “<strong>매수할 주식의 주가가 한 계단(tick) 오른다면 어떤 주식을 사야할까?</strong>”</p>

<h2 id="이익-계산">이익 계산</h2>

<p>나는 현금 $M$을 갖고 있고, 주가가 $p$, 호가 단위(tick)가 $\Delta p$인 주식을 사려한다.
현금을 전부 써서 주식을 매수한다면, 주식은 $ M / p $주만큼 살 수 있을 것이다.
$M$이 $p$에 비하여 상대적으로 크다면 잔금을 무시할 수 있을 정도로 미미해진다.</p>

<p>이 주식을 매도가격 $p + \Delta p$에 판다.
증권거래세, 증권사수수료를 고려하면 수익/지출은 다음과 같다.</p>

<h3 id="매수-시-지출">매수 시 지출</h3>

<ol>
  <li>$ 매수금액 = 매입가격 \times 주식수  = p \times \frac{M}{p} = M $</li>
  <li>$ 매수수수료 = 매수금액 \times 수수료율 = M \times 0.015\% $</li>
</ol>

<h3 id="매도-시-수익">매도 시 수익</h3>

<ol>
  <li>$ 매도금액 = 매도가격 \times 주식수 = (p + \Delta p) \times \frac{M}{p} $</li>
  <li>$ 매도수수료 = 매도금액 \times 수수료율 = (p + \Delta p) \times \frac{M}{p} \times 0.015\% $</li>
  <li>$ 증권거래세 = 매도금액 \times 증권거래세율 = (p + \Delta p) \times \frac{M}{p} \times 0.25\% $</li>
</ol>

<h3 id="이익">이익</h3>

<p>이익 $\Pi$는 다음으로 정리된다. 종자돈 $M$이 클 수록, 주가 $p$는 낮을 수록, 호가 단위 $\Delta p$는 클 수록 커진다.</p>

\[\Pi = ( \frac{\Delta p}{p} \cdot  99.735\% - 0.28\% ) M\]

<p>예를 들어, 현재 13만8,000원인 <code class="language-plaintext highlighter-rouge">SK하이닉스</code>를 1,000만원으로 전부 매수하고 13만8,500원에 판다면, 이득은 8,136원을 얻는다.</p>

<p>이득을 얻으려면 $ \frac{\Delta p}{p} \cdot  99.735\% &gt; 0.28\% $ 이어야 한다.</p>

<p>이걸 좀 더 보기 쉽게 역수로 정리하면 다음과 같다.</p>

\[\frac{p}{\Delta p} &lt; 356.2\]

<p>이 조건을 충족하는 주식은 한 단위만 올라도 이득이고, 충족하지 못하는 주식은 손실이다.</p>

<h2 id="종목-비교">종목 비교</h2>

<p>이 조건을 충족하는 주식은 무엇이 있을까? Python에서 <a href="https://github.com/sharebook-kr/pykrx"><code class="language-plaintext highlighter-rouge">pykrx</code></a> 라이브러리를 이용했다. <strong>2021년 3월 19일 기준으로 KOSPI만 고려한다.</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pykrx</span> <span class="kn">import</span> <span class="n">stock</span>

<span class="k">def</span> <span class="nf">get_ticksize</span><span class="p">(</span><span class="n">price</span><span class="p">):</span>

  <span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">elif</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">5000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">elif</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">10</span>
  <span class="k">elif</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">50000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">50</span>
  <span class="k">elif</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="k">elif</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">500000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">500</span>
  <span class="k">elif</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">500000</span><span class="p">:</span>
    <span class="n">ticksize</span> <span class="o">=</span> <span class="mi">1000</span>
  <span class="k">return</span> <span class="n">ticksize</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">stock</span><span class="p">.</span><span class="nf">get_market_ohlcv_by_ticker</span><span class="p">(</span><span class="sh">"</span><span class="s">20210319</span><span class="sh">"</span><span class="p">)</span>

<span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">종목명</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">index</span>
<span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">종목명</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">종목명</span><span class="sh">'</span><span class="p">].</span><span class="nf">transform</span><span class="p">(</span><span class="n">stock</span><span class="p">.</span><span class="n">get_market_ticker_name</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">호가단위</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">종가</span><span class="sh">'</span><span class="p">].</span><span class="nf">transform</span><span class="p">(</span><span class="n">get_ticksize</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">p배율</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">종가</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">호가단위</span><span class="sh">'</span><span class="p">]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="sh">'</span><span class="s">거래대금</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="nf">to_excel</span><span class="p">(</span><span class="sh">'</span><span class="s">result.xlsx</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>결과를 엑셀로 잘 정리해 거래대금 순서로 30위까지 나열한다.</p>

<p><img src="/assets/images/2021/03/stock-01.jpg" alt="종목 비교" /></p>

<h2 id="결론">결론</h2>

<p><code class="language-plaintext highlighter-rouge">SK 하이닉스</code> 만세!!!다. <code class="language-plaintext highlighter-rouge">SK 바이오사이언스</code>가 갖 상장해서 이상점인 걸 감안하면, <strong>내 거래 스타일에서 <code class="language-plaintext highlighter-rouge">SK 하이닉스</code>만큼 좋은 주식이 안보인다.</strong></p>

<p>물론, 당연한 얘기(disclaimer)지만 이 지표만 절대적으로 볼 수는 없다.
호가단위가 작더라도 장 중에 변동성이 더 큰 주식이 더 좋을 수 있다.</p>

<p>예를 들어 모든 변수를 다 고정하고,
SK하이닉스가 1단위 움직일 때 삼성전자가 3단위로 동행한다고 하면,
<code class="language-plaintext highlighter-rouge">삼성전자</code>($\frac{p}{\Delta p} \div 3 = 273$)가 <code class="language-plaintext highlighter-rouge">SK하이닉스</code>($\frac{p}{\Delta p} = 276$)보다 미미하게나마 더 큰 이득을 본다.</p>

<p>2021년 3월 19일 기준의 결과이므로, 한달 후에 다시 재산출해보려 한다.</p>]]></content><author><name>노지훈</name></author><category term="주식" /><summary type="html"><![CDATA[스캘핑과 스윙의 중간 어느 지점에서(?) 놀고 있다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jihunroh.github.io/assets/images/2021/03/stock-01.jpg" /><media:content medium="image" url="https://jihunroh.github.io/assets/images/2021/03/stock-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>